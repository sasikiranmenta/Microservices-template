server.port=0
spring.application.name=service-1

server.servlet.context-path=/sasi/service1/webapp
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka
#logging.level.root=DEBUG
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}

#Spring Security Related
#To act as resource server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://auth-server:9000

#To act as client
#spring.security.oauth2.client.registration.messaging-client-oidc.client-id=messaging-client
#spring.security.oauth2.client.registration.messaging-client-oidc.client-secret=secret
#spring.security.oauth2.client.registration.messaging-client-oidc.scope=openid
#spring.security.oauth2.client.registration.messaging-client-oidc.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.messaging-client-oidc.redirect-uri=http://127.0.0.1:8080/login/oauth2/code/messaging-client-oidc

## For machine to machine authentication
spring.security.oauth2.client.registration.service1-client-client-credentials.provider=spring
spring.security.oauth2.client.registration.service1-client-client-credentials.client-id=service1-client
spring.security.oauth2.client.registration.service1-client-client-credentials.client-secret=secret1
spring.security.oauth2.client.registration.service1-client-client-credentials.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.service1-client-client-credentials.client-name=service1-client-client-credentials
spring.security.oauth2.client.registration.service1-client-client-credentials.scope=profile
spring.security.oauth2.client.provider.spring.issuer-uri=http://auth-server:9000
